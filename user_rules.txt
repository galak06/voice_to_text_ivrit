# User Rules for AI Assistant

## Rule Name: Explain Typing Annotations
Description: Provide explanations for TypeScript or Python typing annotations during code reviews or inline comments.
Behavior: When a typed function or variable is added/edited, briefly explain the type's meaning or its purpose.

## Rule Name: Suggest Design Patterns
Description: When implementing features, suggest appropriate design patterns (e.g., Singleton, Strategy, Factory) based on the context.
Behavior: Highlight opportunities to refactor or improve using common design patterns.

## Rule Name: Enforce SOLID Principles
Description: Ensure all code adheres to SOLID design principles:
	•	S: Single Responsibility
	•	O: Open/Closed
	•	L: Liskov Substitution
	•	I: Interface Segregation
	•	D: Dependency Inversion
Behavior: Prompt for refactoring or feedback when violations are detected.

## Rule Name: Always Inject and Use SOLID Principles and Design Patterns
Description: Every new feature, class, or service must be implemented using dependency injection and follow SOLID principles with appropriate design patterns.
Behavior: 
	• Always use dependency injection for class dependencies
	• Implement interfaces for all services and components
	• Use Strategy pattern for different algorithms/behaviors
	• Use Factory pattern for object creation
	• Use Observer pattern for event handling
	• Use Command pattern for operations
	• Use Template Method pattern for algorithm skeletons
	• Ensure single responsibility for each class
	• Make classes open for extension, closed for modification
	• Follow Liskov substitution principle
	• Segregate interfaces into focused contracts
	• Depend on abstractions, not concrete implementations
	• Refactor existing code to follow these patterns when modifying
